{"version":3,"sources":["images/sunrise.png","images/sunset.png","Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","handleRefresh","handleSearch","weather","useState","input","setInput","className","placeholder","onChange","e","target","value","onKeyPress","key","type","onClick","Math","floor","main","temp_min","temp_max","src","sunrise","alt","Date","sys","toLocaleTimeString","sunset","wind","speed","humidity","pressure","App","lat","setLat","long","setLong","setPending","setWeather","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","res","ok","Error","json","data","catch","error","console","log","message","station","icon","style","backgroundImage","temp","feels_like","name","moment","format","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d9491fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sunrise.47f31e7b.png\";","export default __webpack_public_path__ + \"static/media/sunset.95fb6369.png\";","import './Weather.css'\r\nimport sunrise from './images/sunrise.png'\r\nimport sunset from './images/sunset.png'\r\nimport { useState } from 'react';\r\n\r\nconst Weather = ({ handleRefresh, handleSearch, weather}) => {\r\n    const [input, setInput] = useState('')\r\n\r\n    const handlePress = (e) => {\r\n        if(e.key === 'Enter') {\r\n            handleSearch(input);\r\n            e.target.value = ''\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            <div className=\"weather__search\">\r\n                <input placeholder=\"Find location\" onChange={e => setInput(e.target.value)} onKeyPress={handlePress} type=\"text\" />\r\n                <button onClick={() => handleSearch(input)}></button>\r\n            </div>\r\n            <button className=\"weather__myLocation\" onClick={() => handleRefresh()}>My Location</button>\r\n            <div className=\"weather__minmax\">\r\n                <div>\r\n                    <p>Min. Temperature</p>\r\n                    <span>{Math.floor(weather?.main.temp_min)}&deg;C</span>\r\n                </div>\r\n                <div>\r\n                    <p>Max. Temperature</p>\r\n                    <span>{Math.floor(weather?.main.temp_max)}&deg;C</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"weather__sunriseAndSet\">\r\n                <div className=\"weather__sun\">\r\n                    <p>Sunrise</p>\r\n                    <div>\r\n                        <img src={sunrise} alt=\"\" />\r\n                        <span>{new Date(weather?.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"weather__sun\">\r\n                    <p>Sunset</p>\r\n                    <div>\r\n                        <img src={sunset} alt=\"\" />\r\n                        <span>{new Date(weather?.sys.sunset * 1000).toLocaleTimeString('en-IN')}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"weather__windAndHumidity\">\r\n                <div>\r\n                    <p>Wind</p>\r\n                    <span>{Math.floor(weather?.wind.speed)} Km/h</span>\r\n                </div>\r\n                <div>\r\n                    <p>Humidity</p>\r\n                    <span>{weather?.main.humidity}%</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"weather__pressure\">\r\n                    <p>Pressure</p>\r\n                    <span>{Math.floor(weather?.main.pressure)}Ph</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Weather from './Weather';\nimport moment from 'moment';\n\nfunction App() {\n\n  const [lat, setLat] = useState('');\n  const [long, setLong] = useState('');\n  const [pending, setPending] = useState(null);\n  \n  const [weather, setWeather] = useState(null);\n\n  //Fetch weather data\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      setLat(position.coords.latitude)\n      setLong(position.coords.longitude)\n    })\n\n    if(lat && long !== '') {\n      fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=metric&appid=86891a88da9e40a54208ce0102d260cc`)\n        .then(res => {\n          if(!res.ok) {\n            throw new Error('We could not fetch data')\n          }\n          return res.json()\n        })\n        .then((data) => {\n          setPending(false)\n          setWeather(data);\n        })\n        .catch(error => {\n          console.log(error.message)\n          setPending(null)\n        })\n    } else {\n      setLat(28.7)\n      setLong(-100.523)\n    }\n  }, [lat, long])\n\n  const station = weather?.weather[0].icon;\n\n  const handleSearch = (input) => {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${input}&units=metric&appid=86891a88da9e40a54208ce0102d260cc`)\n    .then(res => {\n      if(!res.ok) {\n        throw new Error('We could not fetch data')\n      }\n      return res.json()\n    })\n    .then((data) => {\n      setWeather(data);\n    })\n    .catch(error => {\n      console.log(error.message)\n    })\n  }\n\n  const handleRefresh = () => {\n    setLat('');\n    setLong('');\n  }\n\n  return (\n    <div className=\"App\" style={{backgroundImage: `url(https://angel2424.github.io/api/images-weather/${station}.jpg)`}}>\n      <h3 className=\"App__logo\">weather.</h3>\n      <div className=\"App__info\">\n        <div>\n          <h3 className=\"App__temperature\">{`${Math.floor(weather?.main.temp)}`}&deg;</h3>\n          <p className=\"App__feels\">Feels like: {Math.floor(weather?.main.feels_like)}&deg;C</p>\n        </div>\n        <div>\n          <h2 className=\"App__location\">{weather?.name}</h2>\n          <p className=\"App__date\">{moment().format('MMMM Do YYYY')}</p>\n        </div>\n        <div className=\"App__iconAndCondition\">\n          <img className=\"App__icon\" src={`https://angel2424.github.io/api/images-icons/${weather?.weather[0].icon}.png`} alt=\"\" />\n          <p className=\"App__weatherCondition\">{weather?.weather[0].description}</p>\n        </div>\n      </div>\n      <Weather handleRefresh={handleRefresh} handleSearch={handleSearch} weather={weather}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}